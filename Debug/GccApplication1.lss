
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000208  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000208  0000029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800064  00800064  000002a0  2**0
                  ALLOC
  3 .stab         000017a0  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000764  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000021a4  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000078  00000000  00000000  000021d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000941  00000000  00000000  0000224b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001f2  00000000  00000000  00002b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000565  00000000  00000000  00002d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000154  00000000  00000000  000032e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000170  00000000  00000000  00003438  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002a1  00000000  00000000  000035a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000058  00000000  00000000  00003849  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

void wyluskajMlode(uint8_t vale){
	PORTA = (PORTA&0xF0)|(vale & 0x0F);
}

void wyslijDane(uint8_t v){
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
		
	PORTA =  (PORTA | 0b01000000);//Wlac		
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	PORTA =  (PORTA | 0b10000000);//Nadajemy   literki asf sa f
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	wyluskajStare(v);
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	PORTA =  (PORTA & 0b10111111); //Wylacz lock
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
	
	PORTA =  (PORTA | 0b01000000);//Lock
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
	wyluskajMlode(v);
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
	PORTA =  (PORTA & 0b10111111); //Wylacz lock
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
	PORTA &=  0b10111111;
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
	PORTA =  (PORTA & 0b10111111); //Wylacz lock
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
  8a:	0c 94 02 01 	jmp	0x204	; 0x204 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <dodajString>:
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
	
}
  96:	00 d0       	rcall	.+0      	; 0x98 <dodajString+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <dodajString+0x8>
  9a:	1f 92       	push	r1
  9c:	cd b7       	in	r28, 0x3d	; 61
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  9e:	de b7       	in	r29, 0x3e	; 62
  a0:	9d 83       	std	Y+5, r25	; 0x05
  a2:	8c 83       	std	Y+4, r24	; 0x04
  a4:	19 82       	std	Y+1, r1	; 0x01
  a6:	8c 81       	ldd	r24, Y+4	; 0x04
  a8:	9d 81       	ldd	r25, Y+5	; 0x05
  aa:	9b 83       	std	Y+3, r25	; 0x03
  ac:	8a 83       	std	Y+2, r24	; 0x02
  ae:	18 c0       	rjmp	.+48     	; 0xe0 <dodajString+0x4e>
  b0:	8a 81       	ldd	r24, Y+2	; 0x02
  b2:	9b 81       	ldd	r25, Y+3	; 0x03
  b4:	fc 01       	movw	r30, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b6:	40 81       	ld	r20, Z
  b8:	20 91 64 00 	lds	r18, 0x0064
  bc:	30 91 65 00 	lds	r19, 0x0065
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	88 2f       	mov	r24, r24
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	82 0f       	add	r24, r18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c8:	93 1f       	adc	r25, r19
  ca:	64 2f       	mov	r22, r20
  cc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <__eewr_byte_m32>
  d0:	89 81       	ldd	r24, Y+1	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d2:	8f 5f       	subi	r24, 0xFF	; 255
  d4:	89 83       	std	Y+1, r24	; 0x01
  d6:	8a 81       	ldd	r24, Y+2	; 0x02
  d8:	9b 81       	ldd	r25, Y+3	; 0x03
  da:	01 96       	adiw	r24, 0x01	; 1
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
  dc:	9b 83       	std	Y+3, r25	; 0x03
  de:	8a 83       	std	Y+2, r24	; 0x02
  e0:	8a 81       	ldd	r24, Y+2	; 0x02
  e2:	9b 81       	ldd	r25, Y+3	; 0x03
  e4:	fc 01       	movw	r30, r24
  e6:	80 81       	ld	r24, Z
  e8:	88 23       	and	r24, r24
  ea:	11 f7       	brne	.-60     	; 0xb0 <dodajString+0x1e>
  ec:	20 91 64 00 	lds	r18, 0x0064
  f0:	30 91 65 00 	lds	r19, 0x0065
  f4:	89 81       	ldd	r24, Y+1	; 0x01
  f6:	88 2f       	mov	r24, r24
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	82 0f       	add	r24, r18
  fc:	93 1f       	adc	r25, r19
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	0e 94 f5 00 	call	0x1ea	; 0x1ea <__eewr_byte_m32>
 104:	80 91 64 00 	lds	r24, 0x0064
 108:	90 91 65 00 	lds	r25, 0x0065
#include "eeprom.h"

void initLCD()
{
	_delay_ms(15);
	for (int i=0;i<3;i++)
 10c:	c2 96       	adiw	r24, 0x32	; 50
 10e:	90 93 65 00 	sts	0x0065, r25
	{
		wyslijComend(0b00000011);
 112:	80 93 64 00 	sts	0x0064, r24
 116:	80 91 64 00 	lds	r24, 0x0064
 11a:	90 91 65 00 	lds	r25, 0x0065
 11e:	c2 97       	sbiw	r24, 0x32	; 50
 120:	0f 90       	pop	r0
 122:	0f 90       	pop	r0
 124:	0f 90       	pop	r0
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 126:	0f 90       	pop	r0
 128:	0f 90       	pop	r0
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <czytajString>:
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
 138:	ea 97       	sbiw	r28, 0x3a	; 58
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	f8 94       	cli
 13e:	de bf       	out	0x3e, r29	; 62
 140:	0f be       	out	0x3f, r0	; 63
 142:	cd bf       	out	0x3d, r28	; 61
 144:	9a af       	std	Y+58, r25	; 0x3a
	if (__tmp < 1.0)
 146:	89 af       	std	Y+57, r24	; 0x39
 148:	89 ad       	ldd	r24, Y+57	; 0x39
 14a:	9a ad       	ldd	r25, Y+58	; 0x3a
 14c:	9a 83       	std	Y+2, r25	; 0x02
 14e:	89 83       	std	Y+1, r24	; 0x01
 150:	1c 82       	std	Y+4, r1	; 0x04
 152:	1b 82       	std	Y+3, r1	; 0x03
 154:	18 c0       	rjmp	.+48     	; 0x186 <czytajString+0x56>
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	9a 81       	ldd	r25, Y+2	; 0x02
 15a:	0e 94 ed 00 	call	0x1da	; 0x1da <__eerd_byte_m32>
		__ticks = 1;
 15e:	48 2f       	mov	r20, r24
 160:	9e 01       	movw	r18, r28
 162:	29 5f       	subi	r18, 0xF9	; 249
 164:	3f 4f       	sbci	r19, 0xFF	; 255
 166:	8b 81       	ldd	r24, Y+3	; 0x03
	else if (__tmp > 65535)
 168:	9c 81       	ldd	r25, Y+4	; 0x04
 16a:	82 0f       	add	r24, r18
 16c:	93 1f       	adc	r25, r19
 16e:	fc 01       	movw	r30, r24
 170:	40 83       	st	Z, r20
 172:	8b 81       	ldd	r24, Y+3	; 0x03
 174:	9c 81       	ldd	r25, Y+4	; 0x04
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	9c 83       	std	Y+4, r25	; 0x04
 17a:	8b 83       	std	Y+3, r24	; 0x03
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	9a 81       	ldd	r25, Y+2	; 0x02
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	9a 83       	std	Y+2, r25	; 0x02
 184:	89 83       	std	Y+1, r24	; 0x01
 186:	8b 81       	ldd	r24, Y+3	; 0x03
 188:	9c 81       	ldd	r25, Y+4	; 0x04
 18a:	82 33       	cpi	r24, 0x32	; 50
 18c:	91 05       	cpc	r25, r1
 18e:	1c f3       	brlt	.-58     	; 0x156 <czytajString+0x26>
 190:	ce 01       	movw	r24, r28
 192:	07 96       	adiw	r24, 0x07	; 7
 194:	9e 83       	std	Y+6, r25	; 0x06
 196:	8d 83       	std	Y+5, r24	; 0x05
 198:	8d 81       	ldd	r24, Y+5	; 0x05
 19a:	9e 81       	ldd	r25, Y+6	; 0x06
 19c:	ea 96       	adiw	r28, 0x3a	; 58
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	f8 94       	cli
 1a2:	de bf       	out	0x3e, r29	; 62
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	cd bf       	out	0x3d, r28	; 61
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <main>:
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	00 d0       	rcall	.+0      	; 0x1b4 <main+0x6>
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
 1b8:	80 e6       	ldi	r24, 0x60	; 96
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 49 00 	call	0x92	; 0x92 <dodajString>
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c4:	0e 94 98 00 	call	0x130	; 0x130 <czytajString>
 1c8:	9a 83       	std	Y+2, r25	; 0x02
 1ca:	89 83       	std	Y+1, r24	; 0x01
 1cc:	80 e0       	ldi	r24, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1d8:	08 95       	ret

000001da <__eerd_byte_m32>:
 1da:	e1 99       	sbic	0x1c, 1	; 28
 1dc:	fe cf       	rjmp	.-4      	; 0x1da <__eerd_byte_m32>
 1de:	9f bb       	out	0x1f, r25	; 31
 1e0:	8e bb       	out	0x1e, r24	; 30
 1e2:	e0 9a       	sbi	0x1c, 0	; 28
 1e4:	99 27       	eor	r25, r25
 1e6:	8d b3       	in	r24, 0x1d	; 29
 1e8:	08 95       	ret

000001ea <__eewr_byte_m32>:
 1ea:	26 2f       	mov	r18, r22

000001ec <__eewr_r18_m32>:
 1ec:	e1 99       	sbic	0x1c, 1	; 28
 1ee:	fe cf       	rjmp	.-4      	; 0x1ec <__eewr_r18_m32>
 1f0:	9f bb       	out	0x1f, r25	; 31
 1f2:	8e bb       	out	0x1e, r24	; 30
 1f4:	2d bb       	out	0x1d, r18	; 29
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	f8 94       	cli
 1fa:	e2 9a       	sbi	0x1c, 2	; 28
 1fc:	e1 9a       	sbi	0x1c, 1	; 28
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	08 95       	ret

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
#include "eeprom.h"

void initLCD()
{
	_delay_ms(15);
	for (int i=0;i<3;i++)
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
